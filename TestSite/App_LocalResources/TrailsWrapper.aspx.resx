<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="about_paragraph.Text" xml:space="preserve">
    <value>CogQuiz’s provides norms for children to older adults (age range 5 to 89 and an N = 708). The descriptive statistics 
        are broken out in five year cohorts for the child to young adult (5 to 19 years of age) and ten year 
        cohorts for the young adult to elderly.</value>
  </data>
  <data name="about_title.Text" xml:space="preserve">
    <value>Make Trails Test</value>
  </data>
  <data name="accordion_buttonAbout.Text" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="accordion_buttonDetails.Text" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="accordion_buttonMeasure.Text" xml:space="preserve">
    <value>Measure</value>
  </data>
  <data name="accordion_buttonResearch.Text" xml:space="preserve">
    <value>Research</value>
  </data>
  <data name="collapse1_paragraph.Text" xml:space="preserve">
    <value>The Trail Making Test (TMT), originally devised in 1938, was known as the “Partington’s 
            Pathways Test,” or “Divided Attention Test” (Partington &amp; Leiter, 1949). It was initially part of 
            a battery of tests (Army Individual Test Battery) used to assess “…a variety of intellectual functions 
            different from those measured by the Wechsler-Bellevue Intelligence Scale.” (Spreen &amp; Strauss, 1998).
            The test is not typically part of a test battery but administered single in its original paper and pencil
            form.</value>
  </data>
  <data name="collapse1_title.Text" xml:space="preserve">
    <value>About:</value>
  </data>
  <data name="collapse2_paragraph.Text" xml:space="preserve">
    <value>The TMT provides a measure of attention, visual scanning, speed of eye-hand coordination (Part A),
            and mental flexibility (Strauss, Sherman, &amp; Spreen, 2007). In addition, Part B assesses the ability to 
            alternate between stimulus sets and as such is a measure of “executive function” (Mitrushina, et al., 1999).
            Performance on the TMT has been obtained for normal and various clinical populations such as Attention Deficit
            Disorder ADD), Attention Deficit Hyperactivity Disorder, Alzheimer’s disease, Post Traumatic Stress
            Disorder to name a few.</value>
  </data>
  <data name="collapse2_title.Text" xml:space="preserve">
    <value>Measure:</value>
  </data>
  <data name="collapse3_paragraph.Text" xml:space="preserve">
    <value>The TMT and its several variants require the Participant to, in the correct order, link together an array 
            of objects that are labeled in a way indicating a specific order (e.g., numerical, alphabetical). Part A of 
            the TMT contains an array of 25 circles containing the numbers 1 to 25. By clicking the numbered bubbles, 
            the test-taker creates a line from the circle containing the number 1 to the circle containing the number 
            2 and then to the circle containing the number 3 and so on until he/she reaches the circle containing the 
            number 25. In Part B the test-taker is required to alternate between numbers and letters (e.g., the sequence 
            of 1, A, 2, B, 3, C,…)</value>
  </data>
  <data name="collapse3_title.Text" xml:space="preserve">
    <value>Description:</value>
  </data>
  <data name="collapse4_paragraph.Text" xml:space="preserve">
    <value>The TMT and its several variants require the Participant to, in the correct order, link together an array 
            of objects that are labeled in a way indicating a specific order (e.g., numerical, alphabetical). Part A of 
            the TMT contains an array of 25 circles containing the numbers 1 to 25. By clicking the numbered bubbles, 
            the test-taker creates a line from the circle containing the number 1 to the circle containing the number 
            2 and then to the circle containing the number 3 and so on until he/she reaches the circle containing the 
            number 25. In Part B the test-taker is required to alternate between numbers and letters (e.g., the sequence 
            of 1, A, 2, B, 3, C,…)</value>
  </data>
  <data name="collapse4_title.Text" xml:space="preserve">
    <value>Research:</value>
  </data>
  <data name="follow.Text" xml:space="preserve">
    <value>Follow Us</value>
  </data>
  <data name="navbar_about.Text" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="navbar_home.Text" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="navbar_logIn.Text" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="navbar_logOut.Text" xml:space="preserve">
    <value>Log out</value>
  </data>
  <data name="navbar_profile.Text" xml:space="preserve">
    <value>Profile</value>
  </data>
  <data name="or.Text" xml:space="preserve">
    <value>or</value>
  </data>
  <data name="pleaseLogin.Text" xml:space="preserve">
    <value>Please Login</value>
  </data>
  <data name="price_hundred_buy.Text" xml:space="preserve">
    <value>Buy Now</value>
  </data>
  <data name="price_hundred_paragraph.Text" xml:space="preserve">
    <value>Medium Size Project</value>
  </data>
  <data name="price_hundred_title.Text" xml:space="preserve">
    <value>Set of 100</value>
  </data>
  <data name="price_single_buy.Text" xml:space="preserve">
    <value>Buy Now</value>
  </data>
  <data name="price_single_paragraph.Text" xml:space="preserve">
    <value>One Time Run</value>
  </data>
  <data name="price_single_title.Text" xml:space="preserve">
    <value>Single Test</value>
  </data>
  <data name="price_ten_buy.Text" xml:space="preserve">
    <value>Buy Now</value>
  </data>
  <data name="price_ten_paragraph.Text" xml:space="preserve">
    <value>Small Project</value>
  </data>
  <data name="price_ten_title.Text" xml:space="preserve">
    <value>Set of 10</value>
  </data>
  <data name="price_unlim_buy.Text" xml:space="preserve">
    <value>Buy Now</value>
  </data>
  <data name="price_unlim_paragraph.Text" xml:space="preserve">
    <value>Any Number of Participants</value>
  </data>
  <data name="price_unlim_title.Text" xml:space="preserve">
    <value>Set of 500</value>
  </data>
  <data name="register.Text" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="runtest.Text" xml:space="preserve">
    <value>Run test</value>
  </data>
  <data name="specifications_paragraph1.Text" xml:space="preserve">
    <value>This test will take 3 to 5 minutes to complete.</value>
  </data>
  <data name="specifications_paragraph2.Text" xml:space="preserve">
    <value>Recommended minimum screen resolution is 1000 x 700.</value>
  </data>
  <data name="specifications_title.Text" xml:space="preserve">
    <value>Specifications:</value>
  </data>
</root>
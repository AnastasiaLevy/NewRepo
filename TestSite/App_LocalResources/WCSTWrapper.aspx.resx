<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="about_title.Text" xml:space="preserve">
    <value>Card Sort Test</value>
  </data>
  <data name="accordion_button1.Text" xml:space="preserve">
    <value>Research</value>
  </data>
  <data name="accordion_button2.Text" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="accordion_button3.Text" xml:space="preserve">
    <value>Measure</value>
  </data>
  <data name="accordion_button4.Text" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="collapse1_paragraph.Text" xml:space="preserve">
    <value>CogQuiz’s card sorting test like other sorting tests might be administered to individuals
                                 with brain injury (e.g., TBI, stroke, etc.), neurological/neurodegenerative disorders 
                                (e.g., Parkinson’s disease, Alzheimer’s disease, etc.), psychological/mental disorders 
                                (e.g., schizophrenia, depression, etc.), or to assess development in children and decline
                                 in elderly.</value>
  </data>
  <data name="collapse1_title.Text" xml:space="preserve">
    <value>About:</value>
  </data>
  <data name="collapse2_paragraph.Text" xml:space="preserve">
    <value>Card sorting tests measure cognitive flexibility by assessing the test taker’s
                                 ability to switch a response strategy when the rules for responding along a dimension change
                                 (e.g., size, location, etc.). These tests allow mental health professionals to assess 
                                planning strategy, inhibition of responding, shift strategy in response to performance 
                                feedback, and working memory as reflected by holding task relevant information in conscious
                                 awareness.</value>
  </data>
  <data name="collapse2_title.Text" xml:space="preserve">
    <value>Measure:</value>
  </data>
  <data name="collapse3_paragraph.Text" xml:space="preserve">
    <value>In normal individuals, the task is a measure of cognitive flexibility.
                                 We provide several normed response parameters for individuals from 5 to 89 years of age.
                                 Results from the CogQuiz card sorting tests administered alone or without input or supervision 
                                from a licensed mental health specialist are not valid for assessing brain or cognitive function.</value>
  </data>
  <data name="collapse3_title.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="collapse4_paragraph.Text" xml:space="preserve">
    <value>Berg, E. A. (1948). A simple objective for measuring flexibility in thinking. Journal of General Psychology, 39, 15-22.
Eling, P., Derckx, K., &amp; Maes, R. (2008). On the historical and conceptual background of the Wisconsin Card Sorting Test. Brain and Cognition, 67, 247-253.
Flashman, L. A., Horner, M. D., Freides, D. (1991). Note on scoring perseveration on the Wisconsin Card Sorting Test. The Clinical Neurologist, 5, 2, 190-194.
Feldstein, S. N., Keller, F. R., Portman, R. E., Durham, R. L., Klebe, K. J., Davis, H. P. (1999). A comparison of computerized and standard versions of the Wisconsin Card Sorting Test. The Clinical Neurologist, 13, 3, 303-313</value>
  </data>
  <data name="collapse4_title.Text" xml:space="preserve">
    <value>Research</value>
  </data>
  <data name="follow.Text" xml:space="preserve">
    <value>Follow Us</value>
  </data>
  <data name="navbar_about.Text" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="navbar_home.Text" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="navbar_logIn.Text" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="navbar_logOut.Text" xml:space="preserve">
    <value>Log out</value>
  </data>
  <data name="navbar_profile.Text" xml:space="preserve">
    <value>Profile</value>
  </data>
  <data name="or.Text" xml:space="preserve">
    <value>or</value>
  </data>
  <data name="pleaseLogin.Text" xml:space="preserve">
    <value>Please Login</value>
  </data>
  <data name="price_hundred_buy.Text" xml:space="preserve">
    <value>Buy Now</value>
  </data>
  <data name="price_hundred_paragraph.Text" xml:space="preserve">
    <value>Medium Size Project</value>
  </data>
  <data name="price_hundred_title.Text" xml:space="preserve">
    <value>Set of 100</value>
  </data>
  <data name="price_single_buy.Text" xml:space="preserve">
    <value>Buy Now</value>
  </data>
  <data name="price_single_paragraph.Text" xml:space="preserve">
    <value>One Time Run</value>
  </data>
  <data name="price_single_title.Text" xml:space="preserve">
    <value>Single Test</value>
  </data>
  <data name="price_ten_buy.Text" xml:space="preserve">
    <value>Buy Now</value>
  </data>
  <data name="price_ten_paragraph.Text" xml:space="preserve">
    <value>Small Project</value>
  </data>
  <data name="price_ten_title.Text" xml:space="preserve">
    <value>Single Test</value>
  </data>
  <data name="price_unlim_buy.Text" xml:space="preserve">
    <value>Buy Now</value>
  </data>
  <data name="price_unlim_paragraph.Text" xml:space="preserve">
    <value>Large Sample</value>
  </data>
  <data name="price_unlim_title.Text" xml:space="preserve">
    <value>Set of 500</value>
  </data>
  <data name="register.Text" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="runtest.Text" xml:space="preserve">
    <value>Run test</value>
  </data>
  <data name="specifications_paragraph1.Text" xml:space="preserve">
    <value>This test will take about 20 minutes to complete.</value>
  </data>
  <data name="specifications_paragraph2.Text" xml:space="preserve">
    <value>Recommended minimum screen resolution is 1000 x 700.</value>
  </data>
  <data name="specifications_title.Text" xml:space="preserve">
    <value>Specifications:</value>
  </data>
</root>
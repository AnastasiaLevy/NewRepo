<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Content3.Text" xml:space="preserve">
    <value>La forma corta del inventario del eje II de Coolidge (Scati)</value>
  </data>
  <data name="Content4.Text" xml:space="preserve">
    <value>El SCATI es un inventario de 70 artículos que evalúa cinco criterios principales para 14 trastornos de personalidad, de acuerdo con DSM-IV-TR (12 trastornos de personalidad) y DSM-III-R (trastornos de personalidad sádicos y autodestructivos). Hay tres versiones: un formulario de autoinforme y dos formularios significativos (uno para informar sobre un hombre adulto y otro para informar sobre una mujer adulta). El SCATI ha demostrado fiabilidad y validez, y ha sido diseñado y normado para adultos mayores de 15 años. El SCATI se puede utilizar para evaluar la presencia de trastornos de la personalidad y diferenciar entre 14 trastornos de la personalidad.</value>
  </data>
  <data name="Content8_paragraph1.Text" xml:space="preserve">
    <value>Coolidge, F. L., Segal, D. L., Cahill, B. S. &amp; Simenson, J. T. (2010). Psychometric properties of a brief inventory for the screening of personality disorders: The SCATI. Psychology and Psychotherapy: Theory, Research and Practice, 83, 395-405. doi:10.1348/147608310X486363. [click &lt;a target="_blank" href="/content/SCATI/Coolidge et al 2010 SCATI.pdf"&gt;here&lt;/a&gt; for PDF copy]</value>
  </data>
  <data name="Content8_paragraph2.Text" xml:space="preserve">
    <value>Watson, D. C., &amp; Sinha, B. K. (2007). A normative study of the Coolidge axis‐II inventory, short form. Psychology and Psychotherapy: Theory, Research and Practice, 80(3), 437-441. [click &lt;a target="_blank" href="/content/SCATI/Sinha and Watson 2007 SCATI.pdf"&gt;here&lt;/a&gt; for PDF copy]</value>
  </data>
  <data name="Content9_linkBtn.Text" xml:space="preserve">
    <value>Ejemplar de informe</value>
  </data>
  <data name="price_hundred_btn.Text" xml:space="preserve">
    <value>Comprar ahora</value>
  </data>
  <data name="price_hundred_paragraph.Text" xml:space="preserve">
    <value>Proyecto de medio tamaño</value>
  </data>
  <data name="price_hundred_title.Text" xml:space="preserve">
    <value>Conjunto de 100</value>
  </data>
  <data name="price_single_btn.Text" xml:space="preserve">
    <value>Comprar ahora</value>
  </data>
  <data name="price_single_paragraph.Text" xml:space="preserve">
    <value>Ejecutar una sola vez</value>
  </data>
  <data name="price_single_title.Text" xml:space="preserve">
    <value>Solo una prueba</value>
  </data>
  <data name="price_ten_btn.Text" xml:space="preserve">
    <value>Comprar ahora</value>
  </data>
  <data name="price_ten_paragraph.Text" xml:space="preserve">
    <value>Proyecto pequeño</value>
  </data>
  <data name="price_ten_title.Text" xml:space="preserve">
    <value>Conjunto de 10</value>
  </data>
  <data name="price_unlim_btn.Text" xml:space="preserve">
    <value>Comprar ahora</value>
  </data>
  <data name="price_unlim_paragraph.Text" xml:space="preserve">
    <value>Any Number of Participants</value>
  </data>
  <data name="price_unlim_title.Text" xml:space="preserve">
    <value>Uso ilimitado</value>
  </data>
</root>
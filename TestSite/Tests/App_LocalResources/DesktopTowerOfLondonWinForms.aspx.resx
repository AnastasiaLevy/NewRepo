<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="about_download.Text" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="about_manual.Text" xml:space="preserve">
    <value>View User Manual</value>
  </data>
  <data name="about_paragraph.Text" xml:space="preserve">
    <value>The most significant improvement in the CogQuiz TOL is the timing and record keep that can be obtained with a computerized test, and most notably, the ability to create a number of tests for varying populations. The relative low cost of the TOL, the ability to reliably collect various test parameters, and standardizing the procedure, researchers are able to investigate the same cognitive processes with different populations, showing how various conditions can differentially affect planning ability.

While the TOL was developed as a manual test to be implemented using wooden stimulus boards, there is an increasing amount of evidence to support the use of computerized methods of testing. Using computerized testing methods allows for greater standardization of testing procedures and can reduce experimenter biases that may come out during an in person testing session.

Additionally, since the test has been standardized, experimenters do not need to be as highly trained as would be necessary in a traditional testing format (Zygouris &amp; Tsolaki, 2015). Since the experimenters do not need to be trained as thoroughly, overall cost and time of the experiment can be reduced. Research assistants do not need to be trained compensated. As well as ease of administration, computerized testing simplifies the data gathering process and, in many cases, can increase the accuracy of the measurement. Since the administration and data gathering and analysis all take place on the same platform, the data can be stored between tests and changes in performance can be easily tracked over time (Cambridge Cognition, 2012; CNS Vital Signs, 2012; Neurotrax Corporation, 2003;).

Since its creation as a means of assessing planning ability, the TOL has been implemented as a tool for measuring various domains of executive functioning (Bottari et al., 2009; Köstering et al., 2015; Owen, 2005) as well as spatial planning (Berg &amp; Byrd, 2005; Berg, Byrd, McNamara, &amp; MacDonald, 2006; Kaller, Unterrainer, &amp; Stahl, 2012; Pulos &amp; Denzine, 2005; Shallice, 1982; Unterrainer &amp; Owen, 2006), working memory (Albert &amp; Steinberg, 2011; Berg &amp; Byrd, 2002; Pulos &amp; Denzine, 2005), inhibition (Albert &amp; Steinberg, 2011; Berg &amp; Byrd, 2002; Shallice, 1982), and task shifting (Pulos &amp; Denzine, 2005). In addition to Shallice’s (1982) original findings of deficits in individuals with frontal lobe lesions, there have emerged several additional populations that frequently show deficits in their performance on the TOL; those with neurological and psychiatric conditions such as depression or Parkinson’s (Jacobs &amp; Anderson, 2002), individuals who have suffered a traumatic brain injury (TBI), Alzheimer’s and related dementias (Carlin et al., 2000), ADHD (Culbertson &amp; Zillmer, 1998), Autism (Wisley &amp; Howlin, 2009), and schizophrenia (Landua &amp; Morris, 2011)</value>
  </data>
  <data name="about_title.Text" xml:space="preserve">
    <value>Tower of London for desktop</value>
  </data>
  <data name="examples_conteiner1_span1.Text" xml:space="preserve">
    <value>Donec iaculis erat a lorem sodales tempor.</value>
  </data>
  <data name="examples_conteiner1_span2.Text" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</value>
  </data>
  <data name="examples_conteiner1_span3.Text" xml:space="preserve">
    <value>Donec iaculis erat a lorem sodales tempor.</value>
  </data>
  <data name="examples_conteiner1_span4.Text" xml:space="preserve">
    <value>Set</value>
  </data>
  <data name="examples_conteiner1_span5.Text" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit.d</value>
  </data>
  <data name="examples_conteiner1_title.Text" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</value>
  </data>
  <data name="examples_conteiner2_span1.Text" xml:space="preserve">
    <value>Donec iaculis erat a lorem sodales tempor.</value>
  </data>
  <data name="examples_conteiner2_span2.Text" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</value>
  </data>
  <data name="examples_conteiner2_span3.Text" xml:space="preserve">
    <value>Donec iaculis erat a lorem sodales tempor.</value>
  </data>
  <data name="examples_conteiner2_span4.Text" xml:space="preserve">
    <value>Set</value>
  </data>
  <data name="examples_conteiner2_span5.Text" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit.d</value>
  </data>
  <data name="examples_conteiner2_title.Text" xml:space="preserve">
    <value>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</value>
  </data>
  <data name="examples_title.Text" xml:space="preserve">
    <value>View Examples</value>
  </data>
  <data name="follow.Text" xml:space="preserve">
    <value>Follow Us</value>
  </data>
  <data name="navbar_about.Text" xml:space="preserve">
    <value>Memory</value>
  </data>
  <data name="navbar_home.Text" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="navbar_logIn.Text" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="navbar_logOut.Text" xml:space="preserve">
    <value>Log out</value>
  </data>
  <data name="navbar_profile.Text" xml:space="preserve">
    <value>Profile</value>
  </data>
  <data name="price_hundred_buy.Text" xml:space="preserve">
    <value>Buy Now</value>
  </data>
  <data name="price_hundred_paragraph.Text" xml:space="preserve">
    <value>Call for custom order</value>
  </data>
  <data name="price_hundred_title.Text" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="price_single_buy.Text" xml:space="preserve">
    <value>Buy Now</value>
  </data>
  <data name="price_single_paragraph.Text" xml:space="preserve">
    <value>Install on 1 computer</value>
  </data>
  <data name="price_single_title.Text" xml:space="preserve">
    <value>One Install</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="availableTests_title.Text" xml:space="preserve">
    <value>Memory Tests:</value>
  </data>
  <data name="follow.Text" xml:space="preserve">
    <value>FOLLOW US</value>
  </data>
  <data name="memory_paragraph1.Text" xml:space="preserve">
    <value>An early theory proposed by Aristotle of memory conceived of it as a single entity and likened it to an impression made in wax. Current theorist have proposed that memory comes in several different varieties. One distinction is between declarative and nondeclarative memory.</value>
  </data>
  <data name="memory_paragraph2.Text" xml:space="preserve">
    <value>Declartive memory is the form of memory with which most of us are familiar. A subtype of declarative memory is episodic memory and is characterized by temporal and personal tags. For example, I drove to Albany New York yesterday. A second subtype of declarative memory is semantic memory. This type of memory is reflective of general knowledge (e.g., our knowledge tha Albany is the capital of New York state).</value>
  </data>
  <data name="memory_paragraph3.Text" xml:space="preserve">
    <value>Nondeclarative memory is a pervasive form of memory that frequently occurs without conscious awareness and tends to occur automatically. Familiar and easily understood examples of this form of memory are driving a car or typing an email. We are all aware that driving and typing can occur effortlessly and without conscious awareness. Less familiar examples are a conversation where people know the cues telling them when it is their turn to speak and more broadley when one can take a variety of cues from the environment to inform them about their safety or preditions about the day's weather.</value>
  </data>
  <data name="memory_paragraph4.Text" xml:space="preserve">
    <value>Working memory has become one of the hottest topics in memory research. Working memory is a form of memory that is held in conscious awareness and is characterized by active manipulation of information. For example, think about the process of multiplying 13 times 17 in your head. You might think 7 times 3 is 21 and I keep the 1 and carry the 2. I multiple 7 time 1 and add the 2 for a place holder of 91. I then multiple 13 times 1 and place 13 one digit to the left under 91. Next I add the numbers to get 221. I've temporarly held and manipulated information in my conscious awareness. Short-term memory is similar except that I don't manipulate the information. I look up a phone number and repeated it until I've dialed the number and then I drop it from awareness.</value>
  </data>
  <data name="memory_title1.Text" xml:space="preserve">
    <value>Memory</value>
  </data>
  <data name="memory_title2.Text" xml:space="preserve">
    <value>Types of Memory</value>
  </data>
  <data name="memory_title3.Text" xml:space="preserve">
    <value>Declarative Memory</value>
  </data>
  <data name="memory_title4.Text" xml:space="preserve">
    <value>Nondeclarative Memory</value>
  </data>
  <data name="memory_title5.Text" xml:space="preserve">
    <value>Working Memory and Short-term Memory</value>
  </data>
  <data name="navbar_about.Text" xml:space="preserve">
    <value>Memory</value>
  </data>
  <data name="navbar_home.Text" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="navbar_logIn.Text" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="navbar_logOut.Text" xml:space="preserve">
    <value>Log out</value>
  </data>
  <data name="navbar_profile.Text" xml:space="preserve">
    <value>Profile</value>
  </data>
  <data name="pagetitle.title" xml:space="preserve">
    <value>Cognitive Style Questionnaire, Cognitive Test Online Practice, Cognitive Ability Test Online</value>
  </data>
  <data name="services_category1Paragraph.Text" xml:space="preserve">
    <value>Are you concerned with your Attention span, your ability to switch between tasks effectively or your speed of processing? Executive function tests help you determine if you have alfflictions like ADHD or NNNN</value>
  </data>
  <data name="services_category1Title.Text" xml:space="preserve">
    <value>Executive function and Planning</value>
  </data>
  <data name="services_category2Paragraph.Text" xml:space="preserve">
    <value>Speed of processing has been a major explantory varialbe for enhanced cognitive performace during development.</value>
  </data>
  <data name="services_category2Title.Text" xml:space="preserve">
    <value>Processing Speed</value>
  </data>
  <data name="services_title.Text" xml:space="preserve">
    <value>Test Categories</value>
  </data>
</root>
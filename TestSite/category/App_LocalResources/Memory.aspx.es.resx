<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="availableTests_title.Text" xml:space="preserve">
    <value>Pruebas de memoria</value>
  </data>
  <data name="follow.Text" xml:space="preserve">
    <value>SÍGANOS</value>
  </data>
  <data name="memoryBlock_title.Text" xml:space="preserve">
    <value>Memoria</value>
  </data>
  <data name="memory_paragraph1.Text" xml:space="preserve">
    <value>Una teoría temprana propuesta por Aristóteles de memoria la concibió como una sola entidad y la comparó con una impresión hecha en cera. Teóricos actuales han propuesto que la memoria viene en varias variedades diferentes. Una distinción es entre memoria declarativa y no declarativa.</value>
  </data>
  <data name="memory_paragraph2.Text" xml:space="preserve">
    <value>La memoria declarativa es la forma de memoria con la que la mayoría de nosotros estamos familiarizados. Un subtipo de memoria declarativa es la memoria episódica y se caracteriza por etiquetas temporales y personales. Por ejemplo, manejé a Albany, Nueva York ayer. Un segundo subtipo de memoria declarativa es la memoria semántica. Este tipo de memoria refleja el conocimiento general (por ejemplo, nuestro conocimiento de que Albany es la capital del estado de Nueva York).</value>
  </data>
  <data name="memory_paragraph3.Text" xml:space="preserve">
    <value>La memoria no declarativa es una forma</value>
  </data>
  <data name="memory_paragraph4.Text" xml:space="preserve">
    <value />
  </data>
  <data name="memory_title1.Text" xml:space="preserve">
    <value>Memoria</value>
  </data>
  <data name="memory_title2.Text" xml:space="preserve">
    <value>Tipos de memoria</value>
  </data>
  <data name="memory_title3.Text" xml:space="preserve">
    <value>Memoria declarativa</value>
  </data>
  <data name="memory_title4.Text" xml:space="preserve">
    <value>Memoria No declarativa</value>
  </data>
  <data name="memory_title5.Text" xml:space="preserve">
    <value>Memoria de trabajo y Memoria a corto plazo</value>
  </data>
  <data name="navbar_about.Text" xml:space="preserve">
    <value>Memoria</value>
  </data>
  <data name="navbar_home.Text" xml:space="preserve">
    <value>Inicio</value>
  </data>
  <data name="navbar_logIn.Text" xml:space="preserve">
    <value>Iniciar sesión</value>
  </data>
  <data name="navbar_logOut.Text" xml:space="preserve">
    <value>Salir</value>
  </data>
  <data name="navbar_profile.Text" xml:space="preserve">
    <value>Perfil</value>
  </data>
  <data name="pagetitle.title" xml:space="preserve">
    <value>Estilo de cuestionario cognitivo, Prueba cognitiva práctica en línea, Prueba cognoscitiva de la capacidad en línea</value>
  </data>
  <data name="services_category1Paragraph.Text" xml:space="preserve">
    <value>¿Le preocupa su capacidad de atención, su habilidad para cambiar entre tareas de manera efectiva o su velocidad de procesamiento? Las pruebas de función ejecutiva le ayudan a determinar si tiene afflicciones como TDAH o NNNN</value>
  </data>
  <data name="services_category1Title.Text" xml:space="preserve">
    <value>Función ejecutiva y planificación</value>
  </data>
  <data name="services_category2Paragraph.Text" xml:space="preserve">
    <value>La velocidad de procesamiento ha sido una variable explicativa importante para un mayor desempeño cognitivo durante el desarrollo.</value>
  </data>
  <data name="services_category2Title.Text" xml:space="preserve">
    <value>Velocidad de procesamiento</value>
  </data>
  <data name="services_title.Text" xml:space="preserve">
    <value>Categorías de prueba</value>
  </data>
</root>
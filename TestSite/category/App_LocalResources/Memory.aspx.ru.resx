<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="availableTests_title.Text" xml:space="preserve">
    <value>Тесты памяти:</value>
  </data>
  <data name="follow.Text" xml:space="preserve">
    <value>Подписывайтесь на нас</value>
  </data>
  <data name="memoryBlock_title.Text" xml:space="preserve">
    <value>Память</value>
  </data>
  <data name="memory_paragraph1.Text" xml:space="preserve">
    <value>Ранняя теория памяти, предложенная Аристотелем, задумывала ее как единую сущность и сравнивала с впечатлением. Современные теоретики предполагают, что память приходит в нескольких разных вариантах. Декларативная и недекларирующая память.</value>
  </data>
  <data name="memory_paragraph2.Text" xml:space="preserve">
    <value>Декларативная память - это форма памяти, с которой большинство из нас знакомы. Подтип декларативной памяти - эпизодическая память которая характеризуется временными и личными тегами. Например, вчера я поехал в Олбани в Нью-Йорк. Второй подтип декларативной памяти - это семантическая память. Этот тип памяти отражает общие знания (например, наши знания, что Олбани является столицей штата Нью-Йорк).</value>
  </data>
  <data name="memory_paragraph3.Text" xml:space="preserve">
    <value>Неделакларирующая память - это распространенная форма памяти, которая часто встречается без осознания и имеет тенденцию возникать автоматически. Знакомые и легко понятные примеры этой формы памяти: управлять автомобилем или набирать электронное письмо. Мы все знаем, что вождение и типизация могут происходить без усилий и осознания. Менее знакомые примеры - это беседа, в которой люди знают подсказки, рассказывающие им, когда настала их очередь говорить и сколько говорить, когда можно принимать различные сигналы из окружающей среды, чтобы быть в курсе о своей безопасности или предсказать погоду на текущий день.</value>
  </data>
  <data name="memory_paragraph4.Text" xml:space="preserve">
    <value>Рабочая память стала одной из самых актуальных тем в исследовании памяти. Рабочая память - это форма памяти, которая хранится в сознании и характеризуется активным манипулированием информацией. Например, подумайте о процессе умножения 13 на 17 в вашей голове. Вы временно занимаете и манипулируете информацией в своем сознании. Краткосрочная память похожа, за исключением того, что вы не манипулируете информацией. Например, я просматриваю номер телефона и повторяю его до тех пор, пока не наберу номер, а затем опустил его от сознания.</value>
  </data>
  <data name="memory_title1.Text" xml:space="preserve">
    <value>Память</value>
  </data>
  <data name="memory_title2.Text" xml:space="preserve">
    <value>Типы памяти</value>
  </data>
  <data name="memory_title3.Text" xml:space="preserve">
    <value>Декларативная память</value>
  </data>
  <data name="memory_title4.Text" xml:space="preserve">
    <value>Неделакларирующая память</value>
  </data>
  <data name="memory_title5.Text" xml:space="preserve">
    <value>Рабочая память и Краткосрочная память</value>
  </data>
  <data name="navbar_about.Text" xml:space="preserve">
    <value>Память</value>
  </data>
  <data name="navbar_home.Text" xml:space="preserve">
    <value>Главная</value>
  </data>
  <data name="navbar_logIn.Text" xml:space="preserve">
    <value>Логин</value>
  </data>
  <data name="navbar_logOut.Text" xml:space="preserve">
    <value>Выход</value>
  </data>
  <data name="navbar_profile.Text" xml:space="preserve">
    <value>Профиль</value>
  </data>
  <data name="pagetitle.title" xml:space="preserve">
    <value>Вопросник по когнитивным тестам, когнитивная проверка и тренировка онлайн, тест на познавательную способность онлайн</value>
  </data>
  <data name="services_category1Paragraph.Text" xml:space="preserve">
    <value>Вы обеспокоены тем, что касается вашего внимания, вашей способности эффективно переключаться между задачами или скорости обработки информации? Контрольные функциональные тесты помогут вам определить, есть ли у вас такие аффетиции, как ADHD или NNNN</value>
  </data>
  <data name="services_category1Title.Text" xml:space="preserve">
    <value>Исполнительная функция и планирование</value>
  </data>
  <data name="services_category2Paragraph.Text" xml:space="preserve">
    <value>Скорость обработки информации была основной переменной для повышения когнитивной эффективности.</value>
  </data>
  <data name="services_category2Title.Text" xml:space="preserve">
    <value>Скорость обработки информации</value>
  </data>
  <data name="services_title.Text" xml:space="preserve">
    <value>Типы тестов</value>
  </data>
</root>